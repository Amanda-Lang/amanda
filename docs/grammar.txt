program
  : block
  ;

block
  : ( ((expression | statement) SEMI ) | function_declaration )*
  ;

statement
  : declaration
  | assignment_statement
  | mostra_statement
  | retorna_statement
  ;

assignment_statement
  : IDENTIFIER EQUAL expression
  ;

retorna_statement
  : RETORNA expression
  ;

mostra_statement
  : MOSTRA expression
  ;

expression
  : term (add_operator term)*
  ;

term
  : factor (multi_operator term)*
  ;

factor
  : INTEGER
  | REAL
  | LPAR expression RPAR
  | add_operator factor
  | IDENTIFIER (LPAR actual_parameters? RPAR)?
  ;

actual_parameters
  : IDENTIFIER (COMMA IDENTIFIER)*
  ;

mult_operator
  : STAR
  | SLASH
  | MODULO
  ;

add_operator
  : PLUS
  | MINUS
  ;

declaration
  : simple_declaration
  | array_declaration
  ;

simple_declaration
  : DECL type IDENTIFIER (EQUAL expression)?
  ;

array_declaration
  : VECTOR type IDENTIFIER LBRACKET INTEGER RBRACKET
  ;

type
  : IDENTIFIER
  ;

function_declaration
  : DEFINA IDENTIFIER LPAR formal_parameter_section? RPAR (DOUBLECOL type)? LBRACE function_block RBRACE
  ;

function_block
  : ((expression | statement)  SEMI )*

formal_parameter_section
  : type IDENTIFIER (COMMA type IDENTIFIER)*
  ;

COMMENT:
  : ($ ANYTHING $  | $* ANYTHING *$)
