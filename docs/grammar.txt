program
  : block
  ;

block
  : ( ((expression | statement) SEMI ) | function_declaration )*
  ;

statement
  : declaration
  | mostra_statement
  | retorna_statement
  ;

declaration
  : var_declaration
  | array_declaration
  ;

var_declaration
  : DECL type IDENTIFIER assignment?
  ;

array_declaration
  : VECTOR type IDENTIFIER LBRACKET expression RBRACKET
  ;

retorna_statement
  : RETORNA expression
  ;

mostra_statement
  : MOSTRA expression
  ;


re
  : expression (relop expression)*

comp_op
  : GREATER
  | LESSEQ
  | GREATEREQ
  | LESSEQ


eq_op
  : NOTEQUAL
  | DOUBLEEQUAL
  ;


expression
  :  equality
  ;

equality
  : comparison (eq_op comparison)*
  ;

comparison
  : addition (comp_op addition)*
  ;

addition
  : term ( add_operator term)*
  ;

term
  : factor ( multi_operator term)*
  ;

factor
  : INTEGER
  | REAL
  | STRING
  | VERDADEIRO
  | FALSO
  | LPAR expression RPAR
  | ( add_operator | NOT ) factor
  | IDENTIFIER ( function_call | array_ref | assignment ) ?
  ;

function_call
  : LPAR actual_parameters? RPAR
  ;

array_ref
  : LBRACKET expression RBRACKET EQUAL expression?
  ;

actual_parameters
  : expression (COMMA expression)*
  ;

assignment
  : EQUAL expression
  ;

mult_operator
  : STAR
  | SLASH
  | MODULO
  | AND
  ;

add_operator
  : PLUS
  | MINUS
  | OR
  ;


type
  : IDENTIFIER
  ;

function_declaration
  : DEFINA IDENTIFIER LPAR formal_parameter_section? RPAR (COL type)? LBRACE function_block RBRACE
  ;

function_block
  : ( ( expression | statement)  SEMI )*

formal_parameter_section
  : type array_spec? IDENTIFIER (COMMA type IDENTIFIER)*
  ;

array_spec
  : LBRACKET RBRACKET
  ;

COMMENT:
  : ("$" ANYTHING "$"  | "$*" ANYTHING "*$")
