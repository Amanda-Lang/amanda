program
  : declaration*
  ;


declaration
  :  var_declaration
  | function_declaration
  | array_declaration
  | statement
  ;

var_declaration
  : VAR type IDENTIFIER assignment? SEMI
  ;

array_declaration
  : VECTOR type IDENTIFIER LBRACKET equality RBRACKET SEMI
  ;

function_declaration
  : DEFINA IDENTIFIER LPAR formal_parameter_section? RPAR COL (type | VAZIO) block
  ;

formal_parameter_section
  : type LBRACKET RBRACKET? IDENTIFIER (COMMA type IDENTIFIER)*
  ;


statement
  :
  | expr_statement
  | mostra_statement
  | retorna_statement
  | se_statement
  | while_statement
  | for_statement
  | block
  ;


block
  : LBRACE declaration* RBRACE
  ;



retorna_statement
  : RETORNA equality SEMI
  ;

mostra_statement
  : MOSTRA equality SEMI
  ;

se_statement
  : SE LPAR equality RPAR statement (SENAO statement)?
  ;

while_statement
  : ENQUANTO  LPAR equality RPAR statement
  ;

for_statement
  : PARA LPAR for_expression RPAR FACA statement
  ;

for_expression
  : IDENTIFIER DE range_expression
  ;

range_expression
  : equality DDOT equality (inc equality)?
  ;

comp_op
  : GREATER
  | LESSEQ
  | GREATEREQ
  | LESSEQ


eq_op
  : NOTEQUAL
  | DOUBLEEQUAL
  ;

expr_statement
  : expression SEMI
  ;

expression
  : add_assign
  ;

add_assign
  : multi_assign ( ( PLUSEQ| MINUSEQ ) equality )?
  ;

multi_assign
  : assignment ( ( STAREQ| SLASHEQ ) equality )?
  ;

assignment
  : equality (EQUAL assignment)?
  ;

equality
  : comparison (eq_op comparison)*
  ;

comparison
  : addition (comp_op addition)*
  ;

addition
  : term ( add_operator term)*
  ;

term
  : factor ( multi_operator term)*
  ;

factor
  : INTEGER
  | REAL
  | STRING
  | VERDADEIRO
  | FALSO
  | LPAR expression RPAR
  | ( add_operator | NOT ) factor
  | IDENTIFIER ( function_call | array_ref ) ?
  ;

function_call
  : LPAR actual_parameters? RPAR
  ;

array_ref
  : LBRACKET equality RBRACKET
  ;

actual_parameters
  : equality (COMMA equality)*
  ;

assignment
  : EQUAL expression
  ;

mult_operator
  : STAR
  | SLASH
  | MODULO
  | AND
  ;

add_operator
  : PLUS
  | MINUS
  | OR
  ;


type
  : IDENTIFIER
  ;


COMMENT:
  : ("$" ANYTHING "$"  | "$*" ANYTHING "*$")
