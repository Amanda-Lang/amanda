program
  : cmp_stmt* EOF
  ;

cmp_stmt
  : ( declaration | NEWLINE )
  ;

declaration
  :  var_declaration
  | function_declaration
  | array_declaration
  | stmt
  ;

var_declaration
  : VAR IDENTIFIER COLON type assignment? ( SEMI | NEWLINE )
  ;

type
  : IDENTIFIER ( LBRACKET RBRACKET )?
  ;

function_declaration
  : FUNC IDENTIFIER LPAR formal_parameter_section? RPAR COL type 
  cmp_stmt*
  FIM
  ;

procedure_declaration
  : PROC IDENTIFIER LPAR formal_parameter_section? RPAR 
  cmp_stmt*
  FIM
  ;


formal_parameter_section
  : IDENTIFIER COLON type (COMMA formal_parameter_section)*
  ;


stmt
  :
  | expr_stmt
  | mostra_stmt
  | retorna_stmt
  | se_stmt
  | enquanto_stmt
  | para_stmt
  ;

retorna_stmt
  : RETORNA equality (SEMI|NEWLINE)
  ;

mostra_stmt
  : MOSTRA equality (SEMI|NEWLINE)
  ;

se_stmt
  : SE equality ENTAO cmp_stmt (SENAO cmp_stmt)? FIM
  ;

while_stmt
  : ENQUANTO equality FACA cmp_stmt FIM
  ;

for_stmt
  : PARA for_expression FACA cmp_stmt FIM
  ;

for_expression
  : IDENTIFIER DE range_expression
  ;

range_expression
  : equality DDOT equality (inc equality)?
  ;

comp_op
  : GREATER
  | LESSEQ
  | GREATEREQ
  | LESSEQ


eq_op
  : NOTEQUAL
  | DOUBLEEQUAL
  ;

expr_stmt
  : expression (SEMI|NEWLINE)
  ;

expression
  : add_assign
  ;

add_assign
  : multi_assign ( ( PLUSEQ| MINUSEQ ) equality )?
  ;

multi_assign
  : assignment ( ( STAREQ| SLASHEQ ) equality )?
  ;

assignment
  : equality (EQUAL assignment)?
  ;

equality
  : comparison (eq_op comparison)*
  ;

comparison
  : addition (comp_op addition)*
  ;

addition
  : term ( add_operator term)*
  ;

term
  : factor ( multi_operator term)*
  ;

factor
  : INTEGER
  | REAL
  | STRING
  | VERDADEIRO
  | FALSO
  | LPAR expression RPAR
  | ( add_operator | NOT ) factor
  | IDENTIFIER ( call | array_ref ) ? 
  | NULO
  ;

call
  : LPAR actual_parameters? RPAR
  ;

array_ref
  : LBRACKET equality RBRACKET
  ;

actual_parameters
  : equality (COMMA equality)*
  ;


mult_operator
  : STAR
  | SLASH
  | MODULO
  | AND
  ;

add_operator
  : PLUS
  | MINUS
  | OR
  ;


type
  : IDENTIFIER
  ;


LINE_COMMENT:
  : '#'; 
