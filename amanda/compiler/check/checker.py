from typing import NoReturn, Protocol
from amanda.compiler.ast import ASTNode
import amanda.compiler.symbols.core as symbols
from amanda.compiler.tokens import Token
from amanda.compiler.types.core import Registo


class Checker(Protocol):
    ctx_scope: symbols.Scope
    global_scope: symbols.Scope
    ctx_reg: Registo
    scope_depth: int

    def get_generic_params(self, node: ASTNode): ...
    def error(self, code, **kwargs) -> NoReturn: ...
    def error_with_loc(self, loc_tok: Token, code, **kwargs) -> NoReturn: ...
    def enter_ty_ctx(self): ...
    def get_generic_ty_ctx(
        self,
    ): ...
    def define_symbol(
        self, symbol: symbols.Symbol, depth: int, scope: symbols.Scope
    ): ...

    def enter_scope(self, scope: symbols.Scope | None = None): ...
    def leave_scope(self): ...

    def leave_ty_ctx(self): ...
